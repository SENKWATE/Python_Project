import datetime
import pandas as pd

# def julian_2_standard_date(julian_date_input):
#     """
#      This function take julian date as an input and converts it into a standard 
#      date in the format of: day/month/year
#     """
#     if len(julian_date_input) > 5:
#         julian_date_input = julian_date_input[2:]
    
#     return datetime.datetime.strptime(julian_date_input, '%y%j').date().strftime('%d-%m-%Y')
    
months = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}
column = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
index = [str(i).zfill(2) for i in range(1, 32)]
def isLeapYear(year):
  if (year % 4) == 0:
    if (year % 100) == 0:
      if (year % 400) == 0:
        return True
      else:
        return False
    else:
      return True
  else:
    return False


leap_year_data = [
  [ 1, 32, 61, 92, 122, 153, 183, 214, 245, 275, 306, 336 ], 
  [ 2, 33, 62, 93, 123, 154, 184, 215, 246, 276, 307, 337 ], 
  [ 3, 34, 63, 94, 124, 155, 185, 216, 247, 277, 308, 338 ], 
  [ 4, 35, 64, 95, 125, 156, 186, 217, 248, 278, 309, 339 ], 
  [ 5, 36, 65, 96, 126, 157, 187, 218, 249, 279, 310, 340 ], 
  [ 6, 37, 66, 97, 127, 158, 188, 219, 250, 280, 311, 341 ], 
  [ 7, 38, 67, 98, 128, 159, 189, 220, 251, 281, 312, 342 ], 
  [ 8, 39, 68, 99, 129, 160, 190, 221, 252, 282, 313, 343 ], 
  [ 9, 40, 69, 100, 130, 161, 191, 222, 253, 283, 314, 344 ], 
  [ 10, 41, 70, 101, 131, 162, 192, 223, 254, 284, 315, 345 ], 
  [ 11, 42, 71, 102, 132, 163, 193, 224, 255, 285, 316, 346 ], 
  [ 12, 43, 72, 103, 133, 164, 194, 225, 256, 286, 317, 347 ], 
  [ 13, 44, 73, 104, 134, 165, 195, 226, 257, 287, 318, 348 ], 
  [ 14, 45, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349 ], 
  [ 15, 46, 75, 106, 136, 167, 197, 228, 259, 289, 320, 350 ], 
  [ 16, 47, 76, 107, 137, 168, 198, 229, 260, 290, 321, 351 ], 
  [ 17, 48, 77, 108, 138, 169, 199, 230, 261, 291, 322, 352 ], 
  [ 18, 49, 78, 109, 139, 170, 200, 231, 262, 292, 323, 353 ], 
  [ 19, 50, 79, 110, 140, 171, 201, 232, 263, 293, 324, 354 ], 
  [ 20, 51, 80, 111, 141, 172, 202, 233, 264, 294, 325, 355 ], 
  [ 21, 52, 81, 112, 142, 173, 203, 234, 265, 295, 326, 356 ], 
  [ 22, 53, 82, 113, 143, 174, 204, 235, 266, 296, 327, 357 ], 
  [ 23, 54, 83, 114, 144, 175, 205, 236, 267, 297, 328, 358 ], 
  [ 24, 55, 84, 115, 145, 176, 206, 237, 268, 298, 329, 359 ], 
  [ 25, 56, 85, 116, 146, 177, 207, 238, 269, 299, 330, 360 ], 
  [ 26, 57, 86, 117, 147, 178, 208, 239, 270, 300, 331, 361 ], 
  [ 27, 58, 87, 118, 148, 179, 209, 240, 271, 301, 332, 362 ], 
  [ 28, 59, 88, 119, 149, 180, 210, 241, 272, 302, 333, 363 ], 
  [ 29, 60, 89, 120, 150, 181, 211, 242, 273, 303, 334, 364 ], 
  [ 30, 0, 90, 121, 151, 182, 212, 243, 274, 304, 335, 365 ], 
  [ 31, 0, 91, 0, 152, 0, 213, 244, 0, 305, 0, 366 ]
]



regular_year_data = [
  [ 1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 ],
  [ 2, 33, 61, 92, 122, 153, 183, 214, 245, 275, 306, 336 ],
  [ 3, 34, 62, 93, 123, 154, 184, 215, 246, 276, 307, 337 ],
  [ 4, 35, 63, 94, 124, 155, 185, 216, 247, 277, 308, 338 ],
  [ 5, 36, 64, 95, 125, 156, 186, 217, 248, 278, 309, 339 ],
  [ 6, 37, 65, 96, 126, 157, 187, 218, 249, 279, 310, 340 ],
  [ 7, 38, 66, 97, 127, 158, 188, 219, 250, 280, 311, 341 ],
  [ 8, 39, 67, 98, 128, 159, 189, 220, 251, 281, 312, 342 ],
  [ 9, 40, 68, 99, 129, 160, 190, 221, 252, 282, 313, 343 ],
  [ 10, 41, 69, 100, 130, 161, 191, 222, 253, 283, 314, 344 ],
  [ 11, 42, 70, 101, 131, 162, 192, 223, 254, 284, 315, 345 ],
  [ 12, 43, 71, 102, 132, 163, 193, 224, 255, 285, 316, 346 ],
  [ 13, 44, 72, 103, 133, 164, 194, 225, 256, 286, 317, 347 ],
  [ 14, 45, 73, 104, 134, 165, 195, 226, 257, 287, 318, 348 ],
  [ 15, 46, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349 ],
  [ 16, 47, 75, 106, 136, 167, 197, 228, 259, 289, 320, 350 ],
  [ 17, 48, 76, 107, 137, 168, 198, 229, 260, 290, 321, 351 ],
  [ 18, 49, 77, 108, 138, 169, 199, 230, 261, 291, 322, 352 ],
  [ 19, 50, 78, 109, 139, 170, 200, 231, 262, 292, 323, 353 ],
  [ 20, 51, 79, 110, 140, 171, 201, 232, 263, 293, 324, 354 ],
  [ 21, 52, 80, 111, 141, 172, 202, 233, 264, 294, 325, 355 ],
  [ 22, 53, 81, 112, 142, 173, 203, 234, 265, 295, 326, 356 ],
  [ 23, 54, 82, 113, 143, 174, 204, 235, 266, 296, 327, 357 ],
  [ 24, 55, 83, 114, 144, 175, 205, 236, 267, 297, 328, 358 ],
  [ 25, 56, 84, 115, 145, 176, 206, 237, 268, 298, 329, 359 ],
  [ 26, 57, 85, 116, 146, 177, 207, 238, 269, 299, 330, 360 ],
  [ 27, 58, 86, 117, 147, 178, 208, 239, 270, 300, 331, 361 ],
  [ 28, 59, 87, 118, 148, 179, 209, 240, 271, 301, 332, 362 ],
  [ 29, 0, 88, 119, 149, 180, 210, 241, 272, 302, 333, 363 ],
  [ 30, 0, 89, 120, 150, 181, 211, 242, 273, 303, 334, 364 ],
  [ 31, 0, 90, 0, 151, 0, 212, 243, 0, 304, 0, 365 ]
]

leap_year_df = pd.DataFrame(leap_year_data, columns=column, index=index)
regular_year_df = pd.DataFrame(regular_year_data, columns=column, index=index)


def find_julian_day(year,day):
    if isLeapYear(year):
        month = leap_year_df.columns[leap_year_df.isin([day]).any()].tolist()[0]  # Finding column, where a particular value is found, here Julian day
        day_of_month = leap_year_df.loc[leap_year_df.values == day].index.tolist()[0] # Finding index (or row number where a particular value is found, here Julian day)
        return day_of_month + '-' + months[month] + '-' + str(year)
    else:
        month = regular_year_df.columns[regular_year_df.isin([day]).any()].tolist()[0]
        day_of_month = regular_year_df.loc[regular_year_df.values == day].index.tolist()[0]
        return day_of_month + '-' + months[month] + '-' + str(year)